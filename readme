### Code SQL de la base de données mise à jour pour l'état actuelle du projet
 #### 1. Structure de la Base de Données
CREATE DATABASE bibliotheque_gestion;

USE bibliotheque_gestion;

-- Table pour les livres
CREATE TABLE books (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author_id INT NOT NULL,
    genre VARCHAR(100),
    published_year YEAR,
    FOREIGN KEY (author_id) REFERENCES authors(id) ON DELETE CASCADE
);

-- Table pour les auteurs
CREATE TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    bio TEXT
);

-- Table pour les membres
CREATE TABLE members (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL, -- Nouvelle colonne pour le mot de passe
    registration_date DATE NOT NULL
);

-- Table pour les prêts
CREATE TABLE loans (
    id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT NOT NULL,
    member_id INT NOT NULL,
    loan_date DATE NOT NULL,
    return_date DATE,
    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE,
    FOREIGN KEY (member_id) REFERENCES members(id) ON DELETE CASCADE
);


#### 2. Structure des Fichiers

bibliotheque_app/
├── controllers/
│   ├── AuthorController.php       // Logique des auteurs
│   ├── BookController.php         // Logique des livres
│   ├── MemberController.php       // Logique des membres
├── models/
│   ├── Author.php                 // Modèle de données pour les auteurs
│   ├── Book.php                   // Modèle de données pour les livres
│   ├── Member.php                 // Modèle de données pour les membres
├── public/
│   ├── .htaccess                  // Configuration de réécriture d'URL
│   ├── index.php                  // Point d'entrée de l'application
├── views/
│   ├── admin/
│   │   ├── add_author.php         // Vue pour le formulaire d'ajout d'auteur
│   │   ├── add_book.php           // Vue pour le formulaire d'ajout de livre
│   │   ├── add_member.php         // Vue pour le formulaire d'ajout de membre
│   │   ├── edit_author.php        // Vue pour le formulaire d'édition d'auteur
│   │   ├── edit_book.php          // Vue pour le formulaire d'édition de livre
│   │   ├── edit_member.php        // Vue pour le formulaire d'édition de membre
│   │   ├── authors.php            // Vue pour la liste des auteurs
│   │   ├── books.php              // Vue pour la liste des livres
│   │   ├── members.php            // Vue pour la liste des membres
│   ├── members/
│   │   ├── login.php              // Vue pour la connexion des membres
│   │   ├── register.php           // Vue pour l'inscription des membres


---

## Cahier des charges du projet : Gestion de Bibliothèque

### 1. **Introduction**
Ce projet vise à créer une application web pour la gestion d'une bibliothèque. L'application permettra aux utilisateurs de gérer les livres, les auteurs, les membres, et les emprunts de manière intuitive et efficace.

### 2. **Objectifs du Projet**
- **Gestion des livres :** Ajouter, modifier et supprimer des livres dans la bibliothèque.
- **Gestion des auteurs :** Ajouter, modifier et supprimer des auteurs.
- **Gestion des membres :** Inscription, mise à jour des informations, et gestion des emprunts.
- **Suivi des emprunts :** Permettre aux membres d'emprunter des livres et de consulter leurs historiques d'emprunts.

### 3. **Utilisateurs du Site**
#### 3.1 Administrateurs
- Gérer les livres, auteurs et membres.
- Consulter et gérer les emprunts.

#### 3.2 Membres
- S'inscrire et se connecter.
- Consulter les livres disponibles.
- Emprunter des livres.
- Consulter l'historique de leurs emprunts.

### 4. **Fonctionnalités**
#### 4.1 Fonctionnalités pour les Administrateurs
1. **Gestion des livres :**
   - Ajouter un livre (titre, auteur, genre, année de publication).
   - Modifier les informations d'un livre existant.
   - Supprimer un livre.

2. **Gestion des auteurs :**
   - Ajouter un auteur (nom, biographie).
   - Modifier les informations d'un auteur existant.
   - Supprimer un auteur.

3. **Gestion des membres :**
   - Ajouter un membre (nom, email, mot de passe, date d'inscription).
   - Modifier les informations d'un membre existant.
   - Supprimer un membre.

4. **Consultation et gestion des emprunts :**
   - Voir la liste des emprunts en cours.
   - Modifier ou supprimer des emprunts si nécessaire.

#### 4.2 Fonctionnalités pour les Membres
1. **Inscription :**
   - Formulaire d'inscription avec validation des données (nom, email, mot de passe).
   - Création d'un nouvel utilisateur dans la base de données.

2. **Connexion :**
   - Formulaire de connexion avec vérification des identifiants (email, mot de passe).
   - Gestion des sessions pour maintenir l'état connecté.

3. **Consultation des livres :**
   - Page affichant la liste des livres disponibles avec options de recherche ou de filtrage (titre, auteur, genre).

4. **Emprunt de livres :**
   - Formulaire ou bouton sur la page des livres pour permettre l'emprunt.
   - Enregistrement de l'emprunt dans la base de données avec vérifications (disponibilité, etc.).

5. **Historique des emprunts :**
   - Page pour consulter l'historique des emprunts passés.
   - Affichage clair des données récupérées depuis la base de données.

### 5. **Technologies Utilisées**
- **Langage de programmation :** PHP
- **Base de données :** MySQL
- **Frontend :** HTML, CSS, JavaScript

### 6. **Architecture de l'application**
L'application sera construite sur l'architecture MVC (Modèle-Vue-Contrôleur), permettant une séparation claire des préoccupations :
- **Modèles :** Gestion des données et des interactions avec la base de données.
- **Vues :** Interface utilisateur affichant les informations et permettant l'interaction.
- **Contrôleurs :** Logique d'application gérant les requêtes utilisateur et les interactions entre modèles et vues.

### 7. **Planning du Projet**
#### Phases du projet :
1. **Phase 1 :** Conception de la base de données (Accomplie)
2. **Phase 2 :** Développement des fonctionnalités pour les administrateurs (Accomplie)
3. **Phase 3 :** Développement des fonctionnalités pour les membres (En cours)
4. **Phase 4 :** Tests et débogage (À venir)
5. **Phase 5 :** Mise en ligne et maintenance (À venir)

### 8. **Exigences Fonctionnelles**
- L'application doit être accessible sur des navigateurs web modernes.
- Les formulaires doivent inclure des validations pour assurer la qualité des données.
- La gestion des sessions doit être sécurisée pour protéger les données des membres.

### 9. **Exigences Non Fonctionnelles**
- **Performance :** Les pages doivent se charger rapidement.
- **Sécurité :** Les données sensibles (comme les mots de passe) doivent être stockées de manière sécurisée.
- **Scalabilité :** L'application doit être capable de gérer un nombre croissant d'utilisateurs et de livres.

### 10. **Conclusion**
Ce cahier des charges définit les aspects clés du projet de gestion de bibliothèque. Il servira de référence pour le développement et les tests, garantissant que toutes les fonctionnalités essentielles sont mises en œuvre conformément aux exigences définies.


### Récapitulatif :

1. **Inscription et Connexion des Membres** :
   - Les fichiers `register.php` et `login.php` sont en place et fonctionnels, permettant la création d'un nouveau membre.
   - La gestion des sessions a été implémentée avec succès pour garder les membres connectés après leur authentification.
   - Les messages d'erreurs pour les champs vides ou identifiants incorrects sont gérés.
   - La validation des données n'a pas encore été réalisée, mais sera revue ultérieurement pour renforcer la sécurité du site.

2. **Consultation des livres par les membres** :
   - Le système d'affichage des livres est en place.
   - Une route dédiée (`members/books`) a été ajoutée pour permettre aux membres de consulter les livres disponibles.
   - La page de consultation des livres par les membres affiche correctement la liste des livres, avec une mise en page simple.

### Ce qui reste à faire :

1. **Validation des données** :
   - Implémenter une validation plus stricte pour l'inscription et la connexion (vérification des formats d'email, sécurité des mots de passe).

2. **Consultation des livres par les membres** (complément) :
   - Ajouter des options de recherche ou de filtrage des livres (par titre, auteur, genre) pour améliorer l'expérience utilisateur.

3. **Emprunt de livres** :
   - Développer la fonctionnalité pour permettre aux membres d'emprunter un livre depuis la page de consultation.
   - Gérer les vérifications (disponibilité du livre, restrictions éventuelles liées aux emprunts en cours).

4. **Historique des emprunts des membres** :
   - Créer une page pour afficher l'historique des emprunts de chaque membre.
   - Récupérer les informations depuis la base de données pour les afficher clairement.

Le prochain objectif est de développer la fonctionnalité d'emprunt de livres pour les membres.