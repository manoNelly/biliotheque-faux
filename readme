### Code SQL de la base de données mise à jour pour l'état actuelle du projet
 #### 1. Structure de la Base de Données
CREATE DATABASE bibliotheque_gestion;

USE bibliotheque_gestion;

-- Table pour les livres
CREATE TABLE books (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author_id INT NOT NULL,
    genre VARCHAR(100),
    published_year YEAR,
    FOREIGN KEY (author_id) REFERENCES authors(id) ON DELETE CASCADE
);

-- Table pour les auteurs
CREATE TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    bio TEXT
);

-- Table pour les membres
CREATE TABLE members (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL, -- Nouvelle colonne pour le mot de passe
    registration_date DATE NOT NULL
);

-- Table pour les prêts
CREATE TABLE loans (
    id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT NOT NULL,
    member_id INT NOT NULL,
    loan_date DATE NOT NULL,
    return_date DATE,
    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE,
    FOREIGN KEY (member_id) REFERENCES members(id) ON DELETE CASCADE
);


#### 2. Structure des Fichiers

bibliotheque_app/
├── controllers/
│   ├── AuthorController.php       // Logique des auteurs
│   ├── BookController.php         // Logique des livres
│   ├── MemberController.php       // Logique des membres
├── models/
│   ├── Author.php                 // Modèle de données pour les auteurs
│   ├── Book.php                   // Modèle de données pour les livres
│   ├── Member.php                 // Modèle de données pour les membres
├── public/
│   ├── .htaccess                  // Configuration de réécriture d'URL
│   ├── index.php                  // Point d'entrée de l'application
├── views/
│   ├── admin/
│   │   ├── add_author.php         // Vue pour le formulaire d'ajout d'auteur
│   │   ├── add_book.php           // Vue pour le formulaire d'ajout de livre
│   │   ├── add_member.php         // Vue pour le formulaire d'ajout de membre
│   │   ├── edit_author.php        // Vue pour le formulaire d'édition d'auteur
│   │   ├── edit_book.php          // Vue pour le formulaire d'édition de livre
│   │   ├── edit_member.php        // Vue pour le formulaire d'édition de membre
│   │   ├── authors.php            // Vue pour la liste des auteurs
│   │   ├── books.php              // Vue pour la liste des livres
│   │   ├── members.php            // Vue pour la liste des membres
│   ├── members/
│   │   ├── login.php              // Vue pour la connexion des membres
│   │   ├── register.php           // Vue pour l'inscription des membres



### Rapport sur l'état actuel du projet de gestion de bibliothèque

**Introduction**  
Le projet de gestion de bibliothèque a pour objectif de permettre aux administrateurs et aux membres de gérer les livres, auteurs, membres, et emprunts de manière efficace. Il est structuré selon l'architecture MVC et utilise la POO en PHP. Voici un état d'avancement détaillé basé sur les phases prévues.

---

### **Phase 1 : Conception de la base de données et création des tables**  
**Statut : Accomplie**

1. **Analyse des besoins** : Les exigences fonctionnelles et techniques ont été clarifiées (gestion des livres, auteurs, membres, emprunts).
2. **Conception du schéma relationnel** : Un schéma relationnel solide a été établi avec les tables *books*, *authors*, *members*, et *loans*.
3. **Création des tables** : Les scripts SQL pour la création des tables sont prêts, avec des relations clés bien définies (ex. : cascade sur suppression pour les relations entre *books* et *authors*).
4. **Test de la structure** : Les tests ont validé que la structure et les relations fonctionnent correctement.

---

### **Phase 2 : Développement des fonctionnalités pour les administrateurs**  
**Statut : Accomplie**

1. **Interface d'administration** : Des pages pour ajouter, modifier et supprimer les livres, auteurs, et membres ont été créées dans le répertoire *views/admin/*.
2. **Fonctionnalités CRUD** : Les fonctionnalités CRUD pour chaque entité (livres, auteurs, membres) sont implémentées et testées avec validation des données.
3. **Tests fonctionnels** : Les tests ont été effectués, confirmant le bon fonctionnement des opérations CRUD et des pages associées.

---

### **Phase 3 : Développement des fonctionnalités pour les membres**  
**Statut : En cours**

- **Création de l'interface utilisateur pour les membres** : En cours.
  - Le répertoire *views/members/* a été créé avec les fichiers *login.php* et *register.php* pour gérer la connexion et l'inscription des membres.
  - Il reste à concevoir les pages pour consulter les livres disponibles, emprunter des livres, et voir l'historique des emprunts.

- **Inscription des membres** : En cours.
  - Le formulaire d'inscription est à finaliser, avec la validation des données (nom, email, etc.).
  - La logique de création d'un utilisateur dans le modèle *Member* est encore à implémenter.

- **Connexion des membres** : En cours.
  - Le formulaire de connexion existe dans *login.php*, mais il reste à finaliser la validation des identifiants et la gestion des sessions pour les membres.

- **Consultation des livres** : Non commencé.
  - Il faut développer une page permettant aux membres de consulter et de rechercher des livres disponibles dans la bibliothèque.

- **Fonctionnalités d'emprunt** : Non commencé.
  - Il faudra implémenter la fonctionnalité d'emprunt via un formulaire ou bouton pour que les membres puissent emprunter des livres, en gérant les vérifications (livres déjà empruntés, etc.).

- **Historique des emprunts** : Non commencé.
  - La page d'historique des emprunts doit encore être développée pour permettre aux membres de voir leurs emprunts passés.

- **Tests fonctionnels** : À réaliser une fois les fonctionnalités terminées.

---

### **Phase 4 : Tests et débogage**  
**Statut : À venir**

- Tests unitaires et d'intégration à réaliser après le développement complet des fonctionnalités pour les membres.
- Tests utilisateurs pour recueillir des retours et ajuster les fonctionnalités si nécessaire.
- Débogage et optimisation prévus dans cette phase.

---

### **Phase 5 : Mise en ligne et maintenance**  
**Statut : À venir**

- Le déploiement de l'application sur un serveur web, la configuration du serveur, la documentation et le suivi post-lancement sont prévus après la phase de tests et de débogage.

---

### **Résumé des étapes restantes :**
- Finaliser les fonctionnalités d'inscription et de connexion des membres (Phase 3).
- Développer les pages de consultation des livres, emprunt de livres et historique des emprunts pour les membres (Phase 3).
- Effectuer des tests fonctionnels et corrections (Phase 4).
- Mettre en ligne l'application et assurer la maintenance (Phase 5).

---

**Conclusion**  
Le projet a bien progressé, avec les deux premières phases accomplies. La phase actuelle (Phase 3) est en cours, avec des bases solides pour les fonctionnalités membres. Il reste des développements à réaliser pour les interactions des membres avec les livres et leurs emprunts. Une fois ces fonctionnalités finalisées, les phases de tests et de mise en ligne pourront commencer.





---

## Cahier des charges du projet : Gestion de Bibliothèque

### 1. **Introduction**
Ce projet vise à créer une application web pour la gestion d'une bibliothèque. L'application permettra aux utilisateurs de gérer les livres, les auteurs, les membres, et les emprunts de manière intuitive et efficace.

### 2. **Objectifs du Projet**
- **Gestion des livres :** Ajouter, modifier et supprimer des livres dans la bibliothèque.
- **Gestion des auteurs :** Ajouter, modifier et supprimer des auteurs.
- **Gestion des membres :** Inscription, mise à jour des informations, et gestion des emprunts.
- **Suivi des emprunts :** Permettre aux membres d'emprunter des livres et de consulter leurs historiques d'emprunts.

### 3. **Utilisateurs du Site**
#### 3.1 Administrateurs
- Gérer les livres, auteurs et membres.
- Consulter et gérer les emprunts.

#### 3.2 Membres
- S'inscrire et se connecter.
- Consulter les livres disponibles.
- Emprunter des livres.
- Consulter l'historique de leurs emprunts.

### 4. **Fonctionnalités**
#### 4.1 Fonctionnalités pour les Administrateurs
1. **Gestion des livres :**
   - Ajouter un livre (titre, auteur, genre, année de publication).
   - Modifier les informations d'un livre existant.
   - Supprimer un livre.

2. **Gestion des auteurs :**
   - Ajouter un auteur (nom, biographie).
   - Modifier les informations d'un auteur existant.
   - Supprimer un auteur.

3. **Gestion des membres :**
   - Ajouter un membre (nom, email, mot de passe, date d'inscription).
   - Modifier les informations d'un membre existant.
   - Supprimer un membre.

4. **Consultation et gestion des emprunts :**
   - Voir la liste des emprunts en cours.
   - Modifier ou supprimer des emprunts si nécessaire.

#### 4.2 Fonctionnalités pour les Membres
1. **Inscription :**
   - Formulaire d'inscription avec validation des données (nom, email, mot de passe).
   - Création d'un nouvel utilisateur dans la base de données.

2. **Connexion :**
   - Formulaire de connexion avec vérification des identifiants (email, mot de passe).
   - Gestion des sessions pour maintenir l'état connecté.

3. **Consultation des livres :**
   - Page affichant la liste des livres disponibles avec options de recherche ou de filtrage (titre, auteur, genre).

4. **Emprunt de livres :**
   - Formulaire ou bouton sur la page des livres pour permettre l'emprunt.
   - Enregistrement de l'emprunt dans la base de données avec vérifications (disponibilité, etc.).

5. **Historique des emprunts :**
   - Page pour consulter l'historique des emprunts passés.
   - Affichage clair des données récupérées depuis la base de données.

### 5. **Technologies Utilisées**
- **Langage de programmation :** PHP
- **Base de données :** MySQL
- **Frontend :** HTML, CSS, JavaScript

### 6. **Architecture de l'application**
L'application sera construite sur l'architecture MVC (Modèle-Vue-Contrôleur), permettant une séparation claire des préoccupations :
- **Modèles :** Gestion des données et des interactions avec la base de données.
- **Vues :** Interface utilisateur affichant les informations et permettant l'interaction.
- **Contrôleurs :** Logique d'application gérant les requêtes utilisateur et les interactions entre modèles et vues.

### 7. **Planning du Projet**
#### Phases du projet :
1. **Phase 1 :** Conception de la base de données (Accomplie)
2. **Phase 2 :** Développement des fonctionnalités pour les administrateurs (Accomplie)
3. **Phase 3 :** Développement des fonctionnalités pour les membres (En cours)
4. **Phase 4 :** Tests et débogage (À venir)
5. **Phase 5 :** Mise en ligne et maintenance (À venir)

### 8. **Exigences Fonctionnelles**
- L'application doit être accessible sur des navigateurs web modernes.
- Les formulaires doivent inclure des validations pour assurer la qualité des données.
- La gestion des sessions doit être sécurisée pour protéger les données des membres.

### 9. **Exigences Non Fonctionnelles**
- **Performance :** Les pages doivent se charger rapidement.
- **Sécurité :** Les données sensibles (comme les mots de passe) doivent être stockées de manière sécurisée.
- **Scalabilité :** L'application doit être capable de gérer un nombre croissant d'utilisateurs et de livres.

### 10. **Conclusion**
Ce cahier des charges définit les aspects clés du projet de gestion de bibliothèque. Il servira de référence pour le développement et les tests, garantissant que toutes les fonctionnalités essentielles sont mises en œuvre conformément aux exigences définies.

--- 

N'hésite pas à ajuster ce document en fonction de tes besoins spécifiques ou des détails supplémentaires que tu souhaites ajouter. Si tu as besoin d'autres sections ou d'informations, fais-le moi savoir !